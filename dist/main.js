(()=>{function e(e,t){return e>=0&&e<8&&t>=0&&t<8?s.board[e][t][0]:void 0}class t{edges=[];visited=!1;constructor(e,t){this.x=e,this.y=t}addEdge=e=>{this.edges.push(e)};moveOne(){let t=this.x+2,s=this.y+1;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveTwo(){let t=this.x+2,s=this.y-1;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveThree(){let t=this.x+1,s=this.y+2;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveFour(){let t=this.x+1,s=this.y-2;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveFive(){let t=this.x-1,s=this.y+2;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveSix(){let t=this.x-1,s=this.y-2;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveSeven(){let t=this.x-2,s=this.y+1;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}moveEight(){let t=this.x-2,s=this.y-1;t>=0&&t<8&&s>=0&&s<8&&this.addEdge(e(t,s))}addEdges(){this.moveOne(),this.moveTwo(),this.moveThree(),this.moveFour(),this.moveFive(),this.moveSix(),this.moveSeven(),this.moveEight()}}const s=new class{constructor(e){this.board=function(e){let t=[];for(let s=0;s<=e;s++){t.push([]);for(let i=0;i<=e;i++)t[s].push([])}return t}(e)}addNode(){for(let e=0;e<this.board.length;e++)for(let s=0;s<this.board.length;s++)this.board[e][s].push(new t(e,s))}addVertex(){this.board.map((e=>{e.map((e=>{e[0].addEdges()}))}))}}(7);s.addNode(),s.addVertex(),console.log(s.board),console.log(function(t,s,i,h){const d=e(0,0),o=[],r=[];for(o.push([d,0]),r.push(`[${d.x}, ${d.y}]=>`),d.visited=!0;o.length>0;){const[t,s]=o.shift();if(1===t.x&&7===t.y)return r.push(`[${t.x}, ${t.y}]`),`reached goal in ${s} moves! your path: ${r.join(" ")}`;for(let i of t.edges)!1===e(i.x,i.y).visited&&(o.push([e(i.x,i.y),s+1]),r.length<s+1&&r.push(`[${t.x}, ${t.y}] =>`),e(i.x,i.y).visited=!0)}return-1}())})();